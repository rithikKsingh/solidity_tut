we'll work with three new contracts:

1. `SimpleStorage.sol` - the contract we build in the previous section, with some modifications
2. `AddFiveStorage.sol` - a child contract of `SimpleStorage` that leverages _inheritance_
3. `StorageFactory.sol` - a contract that will _deploy_ a `SimpleStorage` contract and _interact_ with it

The `StorageFactory` contract manages numerous instances of an external contract `SimpleStorage`. 
It provides functionality to deploy new contract instances dynamically and allows for the storage and retrieval of values from each instance. 
These instances are maintained and organized within an array, enabling efficient tracking and interaction.


Let's set up the backbone of the code, that contains the function `createSimplestorageContract`. 
This function will deploy a `SimpleStorage` contract and save the result into a _storage variable_:

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

contract StorageFactory {

    function createSimplestorageContract() public {
        // How does StorageFactory know what SimpleStorage looks like?
    }
}

We need to establish a connection between the two contracts, since `StorageFactory` needs to have a complete knowledge of `SimpleStorage`.
One first approach could be copying the `SimpleStorage` contract above `StorageFactory`

> 🗒️ NOTE
> It's allowed to have multiple contracts in the same file. As best practice, however, it's recommended to use only one file for each contract

### Creating a new variable

Following the format _type-visibility-name_, we can declare a new _state variable_ of type `SimpleStorage`.
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

contract StorageFactory {
    SimpleStorage public simpleStorage;

    function createSimplestorageContract() public {
        simpleStorage = new SimpleStorage();
    }
}

> `Simple Storage` refers to the contract type while `simpleStorage` refers to the variable name.
When the `new` keyword is used, the compiler recognizes the intention to deploy a new contract instance. After compiling, we can proceed to deploy it.

### Importing code

The `import` keyword enables a contract to utilize code from other files without needing to include the entire codebase directly within the contract. Here are two of the main advantages that the `import` keyword provides:

1. No cluttering: it prevents your current file from being cluttered with numerous lines of code, keeping it clean and organized.
2. Simplified maintenance: by keeping the code in separate files, it becomes easier to maintain and update individual components 
without affecting the entire codebase. For example, if we change some lines inside `SimpleStorage`, 
we would have also to constantly copy-paste the modified content into `StorageFactory`

You can now remove the previously added `SimpleStorage` code and replace it with the `import` shorthand:
import "./SimpleStorage.sol";

> 🚧 WARNING
> All the solidity contracts should be compiled together using the _same compiler version_. 
It's important to ensure **consistency** between compiler versions across files since each one will have its own `pragma` statement.

### Named Imports

Let's assume for a moment that `SimpleStorage` would contain multiple contracts, e.g. `SimpleStorage`, `SimpleStorage1`, `SimpleStorage2`, 
which are quite extensive in size. If we import the whole file as we did before, the statement will replace the `import` 
directive with _all_ the code contained in `SimpleStorage.sol`. This will result in an unnecessary expensive deployment of the `StorageFactory` contract.

This can be prevented with named imports, which allow you to selectively import only the specific contracts you intend to use:
import { SimpleStorage, SimpleStorage1 } from "./SimpleStorage.sol";


