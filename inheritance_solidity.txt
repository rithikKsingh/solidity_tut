// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;
import {SimpleStorage} from "./SimpleStorage.sol";

contract AddFiveStorage is SimpleStorage {}

The `is` keyword signifies inheritance and links the parent contract `SimpleStorage` to its child contract, `AddFiveStorage`.

### Override and virtual

The `AddFiveStorage` contract now inherits all methods from `SimpleStorage`. It's possible to add new functions to it, for example:

function sayHello() public pure returns(string memory) {
    return "Hello";
}


> 🗒️ NOTE
> To override a method from the parent contract, we must replicate the exact function **signature**, including its name, parameters and adding the visibility and the `override` keyword to it:

function store(uint256 _newFavNumber) public override {}

In the parent class function, add "virtual" keyword to the method being overrided:
function store(uint256 favNumber) public virtual {
    // function body
}
